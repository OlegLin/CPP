#include <array>
#include <iostream>
#include <deque>
#include <list>
#include <iterator>

int main(){
    std::array<int, 3> point = {1,4, 3};

    for (const int& elem : point){
        std::cout << elem << '\t';
    }
    std::cout << '\n';

//********************************************************************** */
// Deque расшифровывается как double-ended queue (двусторонняя очередь).
    std::deque<int> d = {1, 2, 3, 4};
    d.push_back(5);  // добавление в конец, как у вектора
    d.push_back(6);
    d.pop_back();  // удаление из конца, как у вектора
    d.push_front(0);  // добавление в начало
    d.push_front(-1);
    d.pop_front();  // удаление из начала
    // элементы дека: 0, 1, 2, 3, 4, 5
    // обращение по индексам:
    for (size_t i = 0; i != d.size(); ++i) {
        std::cout << d[i] << "\n";
    }
    // range-based for:
    for (int x : d) {
        std::cout << x << "\n";
    }
//******************************************************************** */
    std::list<int> l = {10, 15, 20};
    l.push_front(5);
    l.push_front(0);
    l.push_back(25);
    l.push_back(30);
    l.pop_front();
    l.pop_back();
    for (int x : l) {
        std::cout << x << "\n";  // 5 10 15 20 25
    }

//*********************************************************************** */
    std::list<int> l1 = {10, 15, 20};
   // Используем auto, чтобы не писать громоздкий тип std::list<int>::iterator
    auto iter = l1.begin();
    std::cout << *iter << "\n";  // печатаем начальный элемент
    ++iter;  // сдвигаемся к следующему элементу
    --iter;  // возвращаемся назад

//*********************************************************************** */

    std::list<int> l2 = {10, 15, 20};

    for (auto iter = l2.begin(); iter != l2.end(); ++iter) {
        std::cout << *iter << "\n";  // печатаем элементы списка через итератор
    }

    for (auto iter = l2.rbegin(); iter != l2.rend(); ++iter) {
        std::cout << *iter << "\n";  // проход по списку в обратном порядке
    }

//************************************************************************ */

//     std::list<int> l4 = {0, 10, 15, 20};
//     auto iter = l4.begin();
//     ++iter;
//     l4.insert(iter, 5);  // вставляем на эту позицию элемент
//     // Удаляем из списка чётные числа
//     for (auto iter = l4.begin(); iter != l4.end(); ) {
//         if (*iter % 2 == 0) {
//             iter = l4.erase(iter);  // возвращается итератор на элемент, следующий за удалённым
//         } else {
//             ++iter;
//         }
//     }

// }

//*************************************************************************** */


    std::list<int> l5 = {0, 10, 15, 20};
    // вместо этого удобнее воспользоваться функцией std::next:
    // auto iter = l.begin();
    // ++iter;
    auto iter1 = std::next(l5.begin());  // итератор указывает на второй элемент списка
    // std::advance(iter1, 2);  // итератор указывает на последний элемент

//******************************************************************************** */
}